component reducteur_rendement_frottement
%Réducteur avec rendement et frottement:2.0
% Ce bloc représente un réducteur à rapport de transmission fixe
% et défini par : r = we/ws
% 
% Les connections E et S sont des ports mécaniques de rotation
% associés respectivement à l'entrée et la sortie du réducteur.
%
% Le frottement au sein de ce réducteur est donné par :
%  * un rendement défini par : n = Ps/Pe
%  * un frottement de Coulomb défini par un couple Cf appliqué sur le port S
%

    nodes
        r = foundation.mechanical.rotational.rotational;    % E:left
        c = foundation.mechanical.rotational.rotational;    % S:right
    end

    parameters
        rapport_transmission = { 10, '1' }; % Rapport de transmission 
        rendement = { 0.8, '1'};            % Rendement 
        brkwy_trq = { 25, 'N*m' };          % Breakaway friction torque
        brkwy_vel = { 0.1, 'rad/s' };       % Breakaway friction velocity
        Col_trq = { 20, 'N*m' };            % Coulomb friction torque
    end

    parameters (Access=private)
    static_scale = sqrt(2*exp(1))*(brkwy_trq-Col_trq);  % Scale factor for static torque
    static_thr = sqrt(2)*brkwy_vel;                     % Velocity threshold for static torque
    Col_thr = brkwy_vel/10;                             % Velocity threshold for Coulomb torque
    end

    variables
        t_in = { 0 , 'N*m'}; % Couple d'entrée
        t_out = { 0 , 'N*m'};% Couple de sortie
    end

    function setup
        %through(t_in, r.t, []);
        %through(t_out, c.t, []);
        % Parameter range checking
        if rendement <= 0 || rendement > 1
          error('Le rendement doit être compris entre 0% et 100%');
        end
        if rapport_transmission == 0
            pm_error('simscape:NotZero', 'rapport de transmission');
        end
        if Col_trq < 0
            error('Le couple de frottement doit être positif ou nul');
        end
    end

    branches
        t_in  : r.t -> *;
        t_out : c.t -> *;
    end

    equations
        % Parameter range checking
        assert(rapport_transmission~=0)
        assert(rendement>0)
        assert(rendement<=1)
        assert(Col_trq>=0)
        assert(Col_trq<=brkwy_trq)
        assert(brkwy_trq>0)
        assert(brkwy_vel>0)
        
        if t_in*r.w >= t_out*c.w
            t_out + static_scale * (c.w/static_thr*exp(-(c.w/static_thr)^2)) ...
                               + Col_trq * tanh(c.w/Col_thr) ...
            + rapport_transmission * t_in * rendement == 0;
        else
            (t_out + static_scale * (c.w/static_thr*exp(-(c.w/static_thr)^2)) ...
                                + Col_trq * tanh(c.w/Col_thr)) * rendement ...
            + rapport_transmission * t_in == 0;
        end
        r.w - rapport_transmission * c.w == 0;
    end

end
